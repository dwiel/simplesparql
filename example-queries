example queries:


english: generate thumbnails for all of the pictures in <folder x> and store them

read translate
	image[file.filename] = "/home/dwiel/pictures/stitt blanket/*.jpg"[glob.glob]
	thumb = image.thumbnail(image, 4, 4, image.antialias)
	thumb_image = thumb[pil.image]
write database
	image[amos.thumb] = thumb
	thumb[pil.image] = thumb_image




english: enqueue all albums by artists related to Lavender Diamond

read translate
	artist[rdfs.label] = 'Lavender Diamond'
	artist[lastfm.similar_to] = similar_artist
	album[music.artist] = similar_artist
	album[music.playable] = True
write translate
	playlist.enqueue(playlist.playlist, album)




english: render all notes tagged axpress in html

read translate
	note[note.tag] = 'axpress'
	note[html.html] = html




english: render all artists using a font color for each corresponding to the frequency they are played

read sparql
	artist[music.artist_name] = artist_name
	artist[scrobble.play_count] = play_count
	html_element[html.text] = artist_name
	html_element[html.color] = play_count
	html[html.elements] = html_elements
	html[html.html] = _html




english: render the first 10 artists in my library sorted by play count using a font color for each corresponding to their play count

read sparql
	artist[music.artist_name] = artist_name
	artist[scrobble.play_count] = play_count
read translate
	html_element[html.text] = artist_name
	html_element[html.color] = play_count
	html_elements[sort.sort_ascending] = html.color
	html[html.elements] = html_elements[:10]
	html[html.html] = _html




english: webpages tagged in dwiel's delicious account as gardening with the word bamboo in the page

read translate
	user[delicious.user_name] = 'dwiel'
	user[delicious.bookmark] = page
	page[delicious.tag] = 'gardening'
	page[html.text] = '(.*)bamboo(.*)'
	page[file.url] = _url




english: images on pages in dwiel's delicious account sorted ascending by average color distance from green

read translate
	user[delicious.user_name] = 'dwiel'
	user[delicious.bookmark] = page
	page[html.image] = image
	image[image.average_color] = color
	color.distance(color.green, color) = distance
	sparql.order_ascending = distance

but why not?:

read translate
	user[delicious.user_name] = 'dwiel'
	user[delicious.bookmark] = page
	page[html.image] = image
	color.distance(color.green, image) = distance
	sparql.order_ascending = distance

supper sussinct: (this didn't help much)
	user{
		delicious.user = 'dwiel'
		delicious.bookmark[html.image] = image
	}
	color.distance(color.green, image) = distance
	sparql.order_ascending = distance
	


read translate:
	user delicious account dwiel
	user bookmark page
	images on page
	distance from green to image
	order ascending by distance
	



english: images on flickr tagged sunet sorted by average distance from the color red

read translate
	image[flickr.tag] = 'sunset'
	image[image.average_color] = color
	color.distance(color.red, color) = distance
	sparql.order_ascending = distance

or (same as above)

read translate
	image[flickr.tag] = 'sunset'
	sparql.order_ascending = color.distance(color.red, image.average_color(image))





??? english: newest version of each page in the wiki

read sparql
	page[wiki.pagename] = pagename
	page[wiki.body] = body
	page[wiki.datetime] = datetime
for each pagename :
	query.query[query.sort_descending] = datetime
	query.query[query.limit] = 1



english: newest page in the wiki

read sparql
	page[wiki.pagename] = pagename
	page[wiki.body] = body
	page[wiki.datetime] = datetime
	query.query[query.sort_descending] = datetime
	query.query[query.limit] = 1

note: this doesn't scale well ... every access requires the lookup of every
item in the database and then a sort.  Theoretically, the pattern here should
be detectable.  The pattern being that this data is often/only accessed by the
most frequent, so this meta-information should be kept up to date as it is 
created.  There should be a 'pointer' to the top of the stack to jump to right 
away if there is a descending, limit 1 query.  Where does this use-case pattern
matching fit?















english: generate an rss feed containing all pages bookmarked by Nate tagged 'gardening' and add it to my rss reader tagged friends

(plugin) 5min
read translate
	user[delicious.user] = 'nate'
	user[delicious.page] = page
	page[delicious.tag] = 'gardening'
	page[file.url] = page_url
read translate
	rss_feed[rss.element] = page_urls
write translate
	rss_feed_generate(rss_feed)
read translate
	rss_feed[file.url] = rss_url
write_translate
	rss_reader[rss_reader.contains] = rss_url
	
or

read translate
	user[delicious.user] = 'nate'
	user[delicious.page] = page
	page[delicious.tag] = 'gardening'
	page[file.url] = page_url
read translate
	rss_feed[rss.element] = page_urls
write translate
	rss_feed_generate(rss_feed)
read translate
	rss_feed[file.url] = rss_url
write translate
	rss_reader[rss_reader.contains] = rss_url

or

# python
facts, history, bindings_set = axpress("""
read translate
	user[delicious.user] = 'nate'
	user[delicious.page] = page
	page[delicious.tag] = 'gardening'
	page[file.url] = _page_url
""")

# can only make a variable plural in a seperate sub-query ... ?
#   all values for a plural variable must be found before its plural form can
#		be passed into a translation.
# can the compiler skip past this?
#		no, because the compiler needs to find the path through the space and the
#		order of that path here matters a lot.
page_urls = [bindings['page_url'] for bindings in bindings_set]

facts = axpress("""
given
	rss_feed[rss.element] = page_urls
translate write
	rss_feed_generate(rss_feed)
""", bindings = {page_urls : page_urls})

facts = axpress("""
read translate
	rss_feed[file.url] = rss_url
write translate
	rss_reader[rss_reader.contains] = rss_url
""", given = facts)
































