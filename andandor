what do 'and' and 'or' mean?



image[file.filename] = "*.jpg"[glob.glob]

["*.jpg", glob.glob, filename],
[var.image, file.filename, filename],


glob.glob could bind multiple filenames connected with 'and' or 'or'.  What is the wording of the question?

what set of variables could fit this pattern?






["*.jpg", glob.glob, '/a.jpg']
[var.image, file.filename, '/a.jpg'],
[var.image, file.filename, '/b.jpg'],
[var.image, file.filename, '/c.jpg'],






-----------------------

artist[rdfs.label] = 'Lavender Diamond'
artist[lastfm.similar_to] = similar_artist
album[music.artist] = similar_artist

always keep around a set of possible bindings
[
	"""artist[lastfm.similar_to] = 'ABC'""",
	"""artist[lastfm.similar_to] = 'DEF'""",
	"""artist[lastfm.similar_to] = 'GHI'""",
	"""artist[lastfm.similar_to] = 'LMN'""",
]

[
	"""artist[lastfm.similar_to] = 'ABC'
     album[music.artist] = 'xyz'""",
	"""artist[lastfm.similar_to] = 'ABC'
     album[music.artist] = 'qwe'""",
	"""artist[lastfm.similar_to] = 'DEF'
     album[music.artist] = 'abc'""",
]



def foo(vars) :
	vars['x'] = [1, 2, 3]

this could mean that x can be bound to all 3 of these at once, or it could mean that x can be bound to 1 or x can be bound to 2, etc.

What other syntax could mean a similar thing?

def foo(vars) :
	return [{'x' : 1},{'x' : 2},{'x' : 3}]

this is quite verbose and would be annoying to do a lot...
maybe just some wrapper token:

def foo(vars) :
	vars['x'] = atonce([1,2,3])

what about more complex situations?

def foo(vars) :
	vars['x'] = atonce([1,2,3])
	vars['y'] = [10,20,30]

equivelent to:

[
	{
		'x' : 1,
		'x' : 2,
		'x' : 3,
		'y' : 10
	},{
		'x' : 1,
		'x' : 2,
		'x' : 3,
		'y' : 20
	},{
		'x' : 1,
		'x' : 2,
		'x' : 3,
		'y' : 30
	}
]
but since python dicts can't have multiple values for one key ...
new class Binding which supports multiple values for one key?  seems reasonable.  Could also house code which manipulates Bindings.

or ...

def foo(vars) :
	vars['x'] = (1,2,3)
	vars['y'] = [10,20,30]

this use of a tuple isnt strictly pythonic.  The tuple here is being used as a list but distinguishible from a list.  Could just as easily do like above and have atonce([...]).

either way, does this satisfy the cases?
for now, this handles 95% of the cases that I can think of.  New syntax for the other cases can be created when I have a better understanding of what they even are.


=== conclusion?

at each translation, there is a set of possible bindings.










but wait, theres more ...
how do you say and/or in the query?

test.u[test.x] = 1
test.u[test.x] = 10
test.u[test.y] = 2
test.u[test.y] = 20
test.u[test.z] = 100
test.u[test.div] = div

what does this mean?

could mean that all of those exist at once

could say:

test.u[test.x] = 1
| test.u[test.x] = 10
test.u[test.y] = 2
| test.u[test.y] = 20
test.u[test.z] = 100
test.u[test.div] = div

meaning x is 1 or x is 10 and y is 2 or y is 20 and z is 100

simplist way to deal with this now is to leave it how it is I think.
Multiple sets of binding appear when:
	* there are multiple sets of input bindings to a translation
	* a translation returns a list of values bound to a variable

Is it dangerous to work so far without a clear understanding of how an or query
might look?  It doesn't fit easily into the triple format I dont think

Maybe an or like this:

test.u[test.x] = 1
| test.u[test.x] = 10
test.u[test.y] = 2
| test.u[test.y] = 20

would get translated so this is the initial bindings are these:
[
	[
		test.u[test.x] = 1
		test.u[test.y] = 2
	],[
		test.u[test.x] = 10
		test.u[test.y] = 2
	],[
		test.u[test.x] = 1
		test.u[test.y] = 20
	],[
		test.u[test.x] = 10
		test.u[test.y] = 20
	]
]

instead of these:
[
	[
		test.u[test.x] = 1
		test.u[test.y] = 2
	]
]

which is a transformation that happens in the very begenning of read_translations

sweet.





for later: [1,2,(3,4),5] :=
[
	{
		'x' : 1
	},{
		'x' : 2
	},{
		'x' : 3,
		'x' : 4
	},{
		'x' : 5
	}
]

...





